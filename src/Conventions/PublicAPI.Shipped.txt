Rocket.Surgery.Conventions.Composer
Rocket.Surgery.Conventions.ConventionBuilder<TBuilder, TConvention, TDelegate>
Rocket.Surgery.Conventions.ConventionBuilder<TBuilder, TConvention, TDelegate>.AssemblyCandidateFinder.get -> Rocket.Surgery.Conventions.Reflection.IAssemblyCandidateFinder
Rocket.Surgery.Conventions.ConventionBuilder<TBuilder, TConvention, TDelegate>.AssemblyProvider.get -> Rocket.Surgery.Conventions.Reflection.IAssemblyProvider
Rocket.Surgery.Conventions.ConventionBuilder<TBuilder, TConvention, TDelegate>.ConventionBuilder(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner, Rocket.Surgery.Conventions.Reflection.IAssemblyProvider assemblyProvider, Rocket.Surgery.Conventions.Reflection.IAssemblyCandidateFinder assemblyCandidateFinder, System.Collections.Generic.IDictionary<object, object> properties) -> void
Rocket.Surgery.Conventions.ConventionComposer
Rocket.Surgery.Conventions.ConventionComposer.ConventionComposer(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner) -> void
Rocket.Surgery.Conventions.ConventionComposer.Register(Rocket.Surgery.Conventions.IConventionContext context, System.Collections.Generic.IEnumerable<System.Type> types) -> void
Rocket.Surgery.Conventions.ConventionComposer<TContext, TContribution, TDelegate>
Rocket.Surgery.Conventions.ConventionComposer<TContext, TContribution, TDelegate>.ConventionComposer(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner) -> void
Rocket.Surgery.Conventions.ConventionComposer<TContext, TContribution, TDelegate>.Register(TContext context) -> void
Rocket.Surgery.Conventions.ConventionComposerExtensions
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.AppendConvention(System.Collections.Generic.IEnumerable<TConvention> conventions) -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.AppendConvention(params TConvention[] conventions) -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.AppendConvention<T>() -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.AppendDelegate(System.Collections.Generic.IEnumerable<TDelegate> delegates) -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.AppendDelegate(params TDelegate[] delegates) -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.ConventionContainerBuilder(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner, System.Collections.Generic.IDictionary<object, object> properties) -> void
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.PrependConvention(System.Collections.Generic.IEnumerable<TConvention> conventions) -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.PrependConvention(params TConvention[] conventions) -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.PrependConvention<T>() -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.PrependDelegate(System.Collections.Generic.IEnumerable<TDelegate> delegates) -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.PrependDelegate(params TDelegate[] delegates) -> TBuilder
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.Properties.get -> System.Collections.Generic.IDictionary<object, object>
Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.Scanner.get -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.ConventionContext
Rocket.Surgery.Conventions.ConventionContext.ConventionContext(Microsoft.Extensions.Logging.ILogger logger, System.Collections.Generic.IDictionary<object, object> properties) -> void
Rocket.Surgery.Conventions.ConventionContext.Logger.get -> Microsoft.Extensions.Logging.ILogger
Rocket.Surgery.Conventions.ConventionContext.Properties.get -> System.Collections.Generic.IDictionary<object, object>
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AppendConvention(System.Collections.Generic.IEnumerable<Rocket.Surgery.Conventions.IConvention> conventions) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AppendConvention(System.Collections.Generic.IEnumerable<System.Type> conventions) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AppendConvention(params Rocket.Surgery.Conventions.IConvention[] conventions) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AppendConvention(params System.Type[] conventions) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AppendConvention<T>() -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AppendDelegate(System.Collections.Generic.IEnumerable<System.Delegate> delegates) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AppendDelegate(params System.Delegate[] delegates) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.Apply(System.Action<Rocket.Surgery.Conventions.IConventionHostBuilder> hostBuilder) -> TSelf
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AssemblyCandidateFinder.get -> Rocket.Surgery.Conventions.Reflection.IAssemblyCandidateFinder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.AssemblyProvider.get -> Rocket.Surgery.Conventions.Reflection.IAssemblyProvider
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.ConventionHostBuilder(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner, Rocket.Surgery.Conventions.Reflection.IAssemblyCandidateFinder assemblyCandidateFinder, Rocket.Surgery.Conventions.Reflection.IAssemblyProvider assemblyProvider, System.Diagnostics.DiagnosticSource diagnosticSource, Rocket.Surgery.Conventions.IServiceProviderDictionary serviceProperties) -> void
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.DiagnosticSource.get -> System.Diagnostics.DiagnosticSource
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.PrependConvention(System.Collections.Generic.IEnumerable<Rocket.Surgery.Conventions.IConvention> conventions) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.PrependConvention(System.Collections.Generic.IEnumerable<System.Type> conventions) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.PrependConvention(params Rocket.Surgery.Conventions.IConvention[] conventions) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.PrependConvention(params System.Type[] conventions) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.PrependConvention<T>() -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.PrependDelegate(System.Collections.Generic.IEnumerable<System.Delegate> delegates) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.PrependDelegate(params System.Delegate[] delegates) -> Rocket.Surgery.Conventions.IConventionHostBuilder
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.Properties.get -> System.Collections.Generic.IDictionary<object, object>
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.Scanner.get -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.ServiceProperties.get -> Rocket.Surgery.Conventions.IServiceProviderDictionary
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter.DiagnosticListenerLoggingAdapter(Microsoft.Extensions.Logging.ILogger logger) -> void
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter.LogCritical(Microsoft.Extensions.Logging.EventId eventId, System.Exception exception, string message) -> void
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter.LogDebug(Microsoft.Extensions.Logging.EventId eventId, System.Exception exception, string message) -> void
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter.LogError(Microsoft.Extensions.Logging.EventId eventId, System.Exception exception, string message) -> void
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter.LogInformation(Microsoft.Extensions.Logging.EventId eventId, System.Exception exception, string message) -> void
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter.LogOther(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception exception, string message) -> void
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter.LogTrace(Microsoft.Extensions.Logging.EventId eventId, System.Exception exception, string message) -> void
Rocket.Surgery.Conventions.DiagnosticListenerLoggingAdapter.LogWarning(Microsoft.Extensions.Logging.EventId eventId, System.Exception exception, string message) -> void
Rocket.Surgery.Conventions.DiagnosticLogger
Rocket.Surgery.Conventions.DiagnosticLogger.BeginScope<TState>(TState state) -> System.IDisposable
Rocket.Surgery.Conventions.DiagnosticLogger.DiagnosticLogger(System.Diagnostics.DiagnosticSource diagnosticSource) -> void
Rocket.Surgery.Conventions.DiagnosticLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel logLevel) -> bool
Rocket.Surgery.Conventions.DiagnosticLogger.Log<TState>(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, System.Exception exception, System.Func<TState, System.Exception, string> formatter) -> void
Rocket.Surgery.Conventions.Reflection.AppDomainAssemblyCandidateFinder
Rocket.Surgery.Conventions.Reflection.AppDomainAssemblyCandidateFinder.AppDomainAssemblyCandidateFinder(System.AppDomain appDomain = null, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Rocket.Surgery.Conventions.Reflection.AppDomainAssemblyCandidateFinder.GetCandidateAssemblies(System.Collections.Generic.IEnumerable<string> candidates) -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
Rocket.Surgery.Conventions.Reflection.AppDomainAssemblyProvider
Rocket.Surgery.Conventions.Reflection.AppDomainAssemblyProvider.AppDomainAssemblyProvider(System.AppDomain appDomain = null, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Rocket.Surgery.Conventions.Reflection.AppDomainAssemblyProvider.GetAssemblies() -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
Rocket.Surgery.Conventions.Reflection.DefaultAssemblyCandidateFinder
Rocket.Surgery.Conventions.Reflection.DefaultAssemblyCandidateFinder.DefaultAssemblyCandidateFinder(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Rocket.Surgery.Conventions.Reflection.DefaultAssemblyCandidateFinder.GetCandidateAssemblies(System.Collections.Generic.IEnumerable<string> candidates) -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
Rocket.Surgery.Conventions.Reflection.DefaultAssemblyProvider
Rocket.Surgery.Conventions.Reflection.DefaultAssemblyProvider.DefaultAssemblyProvider(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Rocket.Surgery.Conventions.Reflection.DefaultAssemblyProvider.GetAssemblies() -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
Rocket.Surgery.Conventions.Reflection.DependencyContextAssemblyCandidateFinder
Rocket.Surgery.Conventions.Reflection.DependencyContextAssemblyCandidateFinder.DependencyContextAssemblyCandidateFinder(Microsoft.Extensions.DependencyModel.DependencyContext dependencyContext, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Rocket.Surgery.Conventions.Reflection.DependencyContextAssemblyCandidateFinder.GetCandidateAssemblies(System.Collections.Generic.IEnumerable<string> candidates) -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
Rocket.Surgery.Conventions.Reflection.DependencyContextAssemblyProvider
Rocket.Surgery.Conventions.Reflection.DependencyContextAssemblyProvider.DependencyContextAssemblyProvider(Microsoft.Extensions.DependencyModel.DependencyContext context, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Rocket.Surgery.Conventions.Reflection.DependencyContextAssemblyProvider.GetAssemblies() -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
Rocket.Surgery.Conventions.Scanners.AggregateConventionScanner
Rocket.Surgery.Conventions.Scanners.AggregateConventionScanner.AggregateConventionScanner(Rocket.Surgery.Conventions.Reflection.IAssemblyCandidateFinder assemblyCandidateFinder, System.IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILogger logger, params Rocket.Surgery.Conventions.IConvention[] conventions) -> void
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.AppendConvention(System.Collections.Generic.IEnumerable<Rocket.Surgery.Conventions.IConvention> conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.AppendConvention(System.Collections.Generic.IEnumerable<System.Type> conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.AppendConvention(params Rocket.Surgery.Conventions.IConvention[] conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.AppendConvention(params System.Type[] conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.AppendConvention<T>() -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.AppendDelegate(System.Collections.Generic.IEnumerable<System.Delegate> delegates) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.AppendDelegate(params System.Delegate[] delegates) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.BasicConventionScanner(System.IServiceProvider serviceProvider, params Rocket.Surgery.Conventions.IConvention[] conventions) -> void
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.BuildProvider() -> Rocket.Surgery.Conventions.Scanners.IConventionProvider
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.ExceptConvention(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.ExceptConvention(System.Collections.Generic.IEnumerable<System.Type> types) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.ExceptConvention(params System.Reflection.Assembly[] assemblies) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.ExceptConvention(params System.Type[] types) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.PrependConvention(System.Collections.Generic.IEnumerable<Rocket.Surgery.Conventions.IConvention> conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.PrependConvention(System.Collections.Generic.IEnumerable<System.Type> conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.PrependConvention(params Rocket.Surgery.Conventions.IConvention[] conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.PrependConvention(params System.Type[] conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.PrependConvention<T>() -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.PrependDelegate(System.Collections.Generic.IEnumerable<System.Delegate> delegates) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.BasicConventionScanner.PrependDelegate(params System.Delegate[] delegates) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.AppendConvention(System.Collections.Generic.IEnumerable<Rocket.Surgery.Conventions.IConvention> conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.AppendConvention(System.Collections.Generic.IEnumerable<System.Type> conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.AppendConvention(params Rocket.Surgery.Conventions.IConvention[] conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.AppendConvention(params System.Type[] conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.AppendConvention<T>() -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.AppendDelegate(System.Collections.Generic.IEnumerable<System.Delegate> delegates) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.AppendDelegate(params System.Delegate[] delegates) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.BuildProvider() -> Rocket.Surgery.Conventions.Scanners.IConventionProvider
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.ConventionScannerBase(Rocket.Surgery.Conventions.Reflection.IAssemblyCandidateFinder assemblyCandidateFinder, System.IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILogger logger) -> void
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.ExceptConvention(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.ExceptConvention(System.Collections.Generic.IEnumerable<System.Type> types) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.ExceptConvention(params System.Reflection.Assembly[] assemblies) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.ExceptConvention(params System.Type[] types) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.GetAssemblyConventions() -> System.Collections.Generic.IEnumerable<Rocket.Surgery.Conventions.IConvention>
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.PrependConvention(System.Collections.Generic.IEnumerable<Rocket.Surgery.Conventions.IConvention> conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.PrependConvention(System.Collections.Generic.IEnumerable<System.Type> conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.PrependConvention(params Rocket.Surgery.Conventions.IConvention[] conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.PrependConvention(params System.Type[] conventions) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.PrependConvention<T>() -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.PrependDelegate(System.Collections.Generic.IEnumerable<System.Delegate> delegates) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.ConventionScannerBase.PrependDelegate(params System.Delegate[] delegates) -> Rocket.Surgery.Conventions.Scanners.IConventionScanner
Rocket.Surgery.Conventions.Scanners.SimpleConventionScanner
Rocket.Surgery.Conventions.Scanners.SimpleConventionScanner.SimpleConventionScanner(Rocket.Surgery.Conventions.Reflection.IAssemblyCandidateFinder assemblyCandidateFinder, System.IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILogger logger) -> void
Rocket.Surgery.Conventions.ServiceProviderDictionary
Rocket.Surgery.Conventions.ServiceProviderDictionary.Add(System.Collections.Generic.KeyValuePair<object, object> item) -> void
Rocket.Surgery.Conventions.ServiceProviderDictionary.Add(object key, object value) -> void
Rocket.Surgery.Conventions.ServiceProviderDictionary.Clear() -> void
Rocket.Surgery.Conventions.ServiceProviderDictionary.Contains(System.Collections.Generic.KeyValuePair<object, object> item) -> bool
Rocket.Surgery.Conventions.ServiceProviderDictionary.ContainsKey(object key) -> bool
Rocket.Surgery.Conventions.ServiceProviderDictionary.CopyTo(System.Collections.Generic.KeyValuePair<object, object>[] array, int index) -> void
Rocket.Surgery.Conventions.ServiceProviderDictionary.Count.get -> int
Rocket.Surgery.Conventions.ServiceProviderDictionary.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<object, object>>
Rocket.Surgery.Conventions.ServiceProviderDictionary.GetService(System.Type serviceType) -> object
Rocket.Surgery.Conventions.ServiceProviderDictionary.IsReadOnly.get -> bool
Rocket.Surgery.Conventions.ServiceProviderDictionary.Keys.get -> System.Collections.Generic.ICollection<object>
Rocket.Surgery.Conventions.ServiceProviderDictionary.Remove(System.Collections.Generic.KeyValuePair<object, object> item) -> bool
Rocket.Surgery.Conventions.ServiceProviderDictionary.Remove(object key) -> bool
Rocket.Surgery.Conventions.ServiceProviderDictionary.ServiceProviderDictionary() -> void
Rocket.Surgery.Conventions.ServiceProviderDictionary.ServiceProviderDictionary(System.Collections.Generic.IDictionary<object, object> values) -> void
Rocket.Surgery.Conventions.ServiceProviderDictionary.TryGetValue(object key, out object value) -> bool
Rocket.Surgery.Conventions.ServiceProviderDictionary.Values.get -> System.Collections.Generic.ICollection<object>
Rocket.Surgery.Conventions.ServiceProviderDictionary.this[object key].get -> object
Rocket.Surgery.Conventions.ServiceProviderDictionary.this[object key].set -> void
static Rocket.Surgery.Conventions.Composer.Register(Rocket.Surgery.Conventions.Scanners.IConventionProvider provider, Rocket.Surgery.Conventions.IConventionContext context, System.Collections.Generic.IEnumerable<System.Type> types) -> void
static Rocket.Surgery.Conventions.Composer.Register(Rocket.Surgery.Conventions.Scanners.IConventionProvider provider, Rocket.Surgery.Conventions.IConventionContext context, params System.Type[] types) -> void
static Rocket.Surgery.Conventions.Composer.Register(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner, Rocket.Surgery.Conventions.IConventionContext context, System.Collections.Generic.IEnumerable<System.Type> types) -> void
static Rocket.Surgery.Conventions.Composer.Register(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner, Rocket.Surgery.Conventions.IConventionContext context, params System.Type[] types) -> void
static Rocket.Surgery.Conventions.Composer.Register<TContext, TContribution, TDelegate>(Rocket.Surgery.Conventions.Scanners.IConventionProvider provider, Rocket.Surgery.Conventions.IConventionContext context) -> void
static Rocket.Surgery.Conventions.Composer.Register<TContext, TContribution, TDelegate>(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner, Rocket.Surgery.Conventions.IConventionContext context) -> void
static Rocket.Surgery.Conventions.ConventionComposerExtensions.Register(this Rocket.Surgery.Conventions.IConventionComposer composer, Rocket.Surgery.Conventions.IConventionContext context, System.Type type, params System.Type[] types) -> void
virtual Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.this[object item].get -> object
virtual Rocket.Surgery.Conventions.ConventionContainerBuilder<TBuilder, TConvention, TDelegate>.this[object item].set -> void
virtual Rocket.Surgery.Conventions.ConventionContext.this[object item].get -> object
virtual Rocket.Surgery.Conventions.ConventionContext.this[object item].set -> void
virtual Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.this[object item].get -> object
virtual Rocket.Surgery.Conventions.ConventionHostBuilder<TSelf>.this[object item].set -> void